#!/usr/bin/env node

/**
* Module Dependencies
*/

var app = require('../app');
var debug = require('debug')('mean-app:server');
var http = require('http');

/**
* Get port from environment and store in Express
*/

var port = normalizePort('3000' || process.env.PORT);
app.set('port',port);

/**
* Create a http server
*/

var server = http.createServer(app);

/** 
* Listen on provided port
*/

server.listen(port);
server.on('error',onError);
server.on('listening',onListening);

/**
* normalize a port into a number, string, or false.
*/

function normalizePort(val){
    if(isNaN(port)){
        // named pipe
        return val;
    }
    if(port>=0){
        // port number
        return port;
    }
    return false;
}

/** 
* Event listener from HTTP server "error"event
*/

function onError(error){
    if(error.syscall!= 'listen'){
        throw error;
    }
    var bind = typeof port == 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code){
        case 'EACCES':
        console.error(bind + ' require elevated privelages');
        process.exit(1);
        break;
        case 'EADDRINUSE' :
        console.error(bind + ' already in use');
        process.exit(1);
        break;
        default:
        throw error;
    }
}

/** 
* Event listener for http server 'listening' event
*/

function onListening(){
    var addr = server.address();
    var bind = typeof addr == 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on '+ bind);
}
